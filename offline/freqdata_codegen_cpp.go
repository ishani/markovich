package main

import (
	"bytes"
	"fmt"
	"os"
	"sort"
)

// ------------------------------------------------------------------------------------------------
func codegenCppStartHeader(path string, namespace string) *codeGenUtil {

	buf := new(bytes.Buffer)
	buf.Grow(1024 * 8)

	buf.WriteString("// generated by markovich:tablegen\n// ishani.org\n\n")
	buf.WriteString("namespace mk {\n")
	buf.WriteString(fmt.Sprintf("namespace %s {\n\n", namespace))

	return &codeGenUtil{buf, path, namespace}
}

// ------------------------------------------------------------------------------------------------
// the trigram 'roots' is just a big list of all the trigrams in sorted order; we use this to start
// generating a new name, seeding the process with a set of letters that are guaranteed to have
// some branches to walk along
func (cg *codeGenUtil) emitRoots(fqd *freqdata) {

	var buildBuffer bytes.Buffer

	numRoots := 0
	breakPt := 0
	for _, k := range fqd.trigramsSorted {

		numBranches := len(fqd.trigrams[k])
		if numBranches > 2 {

			if breakPt == 0 {
				buildBuffer.WriteString("    \"")
			}
			breakPt++

			buildBuffer.WriteString(k)
			numRoots++

			if breakPt == 40 {
				buildBuffer.WriteString("\"\n")
				breakPt = 0
			}
		}
	}
	if breakPt != 0 {
		buildBuffer.WriteString("\"")
	}
	buildBuffer.WriteString(";\n\n")

	cg.buf.WriteString(fmt.Sprintf("enum { eTrigramRoots = %d };\n\n", numRoots))
	cg.buf.WriteString("static const char g_trigramRoots[ (eTrigramRoots * 3) + 1 ] = \n")
	cg.buf.WriteString(buildBuffer.String())

	cg.buf.WriteString("#include \"inline/common-roots.inl\"\n")
}

// ------------------------------------------------------------------------------------------------
func (cg *codeGenUtil) emitSelector(fqd *freqdata) {

	cg.buf.WriteString("MKV_DISABLE_OPT\n")
	cg.buf.WriteString("static char SelectNextLetter(\n")
	cg.buf.WriteString("    const uint32_t          trigram_u32,\n")
	cg.buf.WriteString("    const float             input_weight,\n")
	cg.buf.WriteString("    const uint32_t          input_seed,\n")
	cg.buf.WriteString("    BranchDecisionFunction  decision_fn )\n")
	cg.buf.WriteString("{\n")
	cg.buf.WriteString("    const char initial_letter = (char)( trigram_u32 & 0xff );\n")
	cg.buf.WriteString("    switch (initial_letter)\n")
	cg.buf.WriteString("    {\n")

	var lastRune byte
	for _, k := range fqd.trigramsSorted {

		// emit new top-level case statements if we change to a new inital-letter
		if lastRune != k[0] {
			if lastRune != 0 {
				cg.emitSelectorCaseClose(lastRune)
			}
			lastRune = k[0]
			cg.emitSelectorCaseOpen(lastRune)
		}

		curTri := fqd.trigrams[k]
		newBranches := len(curTri)

		// unpack the map of byte->weight to an array that we can then sort
		var sortedTri []sortableBranch
		for b, f := range curTri {
			sortedTri = append(sortedTri, sortableBranch{b, f})
		}

		// .. do so, by weight
		sort.Slice(sortedTri, func(i, j int) bool {
			return sortedTri[i].weight > sortedTri[j].weight
		})

		//
		cg.buf.WriteString(fmt.Sprintf("            // %s\n", k))
		cg.buf.WriteString(fmt.Sprintf("            case 0x00%02x%02x%02x:\n", k[2], k[1], k[0]))
		cg.buf.WriteString("            {\n")

		// only one branch? just return the letter
		if newBranches == 1 {

			for _, st := range sortedTri {
				cg.buf.WriteString(fmt.Sprintf("                return '%s';\n", quoteCharacter(st.letter)))
			}

		} else {
			// multiple branches; plug out the list of characters and weights, then call the decision fn

			cg.buf.WriteString(fmt.Sprintf("                MKV_DATA char  data_chars[%d]   = \"", newBranches+1))
			for _, st := range sortedTri {
				cg.buf.WriteString(quoteCharacter(st.letter))
			}
			cg.buf.WriteString("\";\n")

			cg.buf.WriteString(fmt.Sprintf("                MKV_DATA uint16_t data_weights[%d] = {\n", newBranches))
			for _, st := range sortedTri {
				fxp := uint16(Round(float64(st.weight) * 0x00010000))
				cg.buf.WriteString(fmt.Sprintf("                    0x%04x, // %f \n", fxp, st.weight))
			}
			cg.buf.WriteString("                };\n")

			cg.buf.WriteString(fmt.Sprintf("                return decision_fn( data_chars, data_weights, %d, input_weight, input_seed );\n", newBranches))
		}

		cg.buf.WriteString("            }\n")
		cg.buf.WriteString("            break;\n\n")
	}
	if lastRune != 0 {
		cg.emitSelectorCaseClose(lastRune)
	}

	cg.buf.WriteString("    }\n")
	cg.buf.WriteString("    return 0;\n")
	cg.buf.WriteString("} // SelectNextLetter()\n")
}

// ------------------------------------------------------------------------------------------------
func (cg *codeGenUtil) finishCpp() {

	cg.buf.WriteString(fmt.Sprintf("\n} // namespace %s\n", cg.namespace))
	cg.buf.WriteString("} // namespace mk\n")

	if err := os.WriteFile(cg.path, cg.buf.Bytes(), 0644); err != nil {
		panic(err)
	}
}

// ------------------------------------------------------------------------------------------------
func codegenCppRoots(fqd *freqdata, path string, namespace string) {

	outputfile := fmt.Sprintf("%smk-roots-%s.inl", path, namespace)

	hdr := codegenCppStartHeader(outputfile, namespace)
	hdr.emitRoots(fqd)
	hdr.finishCpp()
}

// ------------------------------------------------------------------------------------------------
func codegenCppProcessor(fqd *freqdata, path string, namespace string) {

	outputfile := fmt.Sprintf("%smk-selector-%s.inl", path, namespace)

	hdr := codegenCppStartHeader(outputfile, namespace)
	hdr.emitSelector(fqd)
	hdr.finishCpp()
}

// ------------------------------------------------------------------------------------------------
func codegenCppMasterInclude(path string, generated ...string) {

	outputfile := fmt.Sprintf("%smk-all.inl", path)

	buf := new(bytes.Buffer)
	buf.Grow(1024 * 2)

	buf.WriteString("// generated by markovich:tablegen\n// ishani.org\n\n")

	buf.WriteString("#include \"inline/common-all-begin.inl\"\n\n")

	for _, gp := range generated {

		headerSelector := fmt.Sprintf("mk-selector-%s.inl", gp)
		headerRoots := fmt.Sprintf("mk-roots-%s.inl", gp)

		buf.WriteString(fmt.Sprintf("#include \"%s\"\n", headerSelector))
		buf.WriteString(fmt.Sprintf("#include \"%s\"\n", headerRoots))
	}

	buf.WriteString("\n#define MKV_CHOICE_LIST( _call )  ")
	for _, gp := range generated {
		buf.WriteString(fmt.Sprintf("\\\n    _call( %s )  ", gp))
	}

	buf.WriteString("\n\nnamespace mk {\n\n")

	buf.WriteString("enum class Choice {\n")
	for _, gp := range generated {
		buf.WriteString(fmt.Sprintf("    %s,\n", gp))
	}
	buf.WriteString("};\n")

	buf.WriteString("\n} // namespace mk\n\n")
	buf.WriteString("#include \"inline/common-all-end.inl\"\n")

	if err := os.WriteFile(outputfile, buf.Bytes(), 0644); err != nil {
		panic(err)
	}
}
